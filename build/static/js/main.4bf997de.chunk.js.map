{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handleClick","name","userId","soundId","question_key","a","requestOptions","method","headers","body","JSON","stringify","fetch","response","json","data","console","log","error","state","kind","tags","user","isLoaded","res","this","setState","questions","newData","resData","arr","forEach","question","push","file","style","width","src","controls","preload","date","createdAt","convert","Button","color","onClick","key","populateData","columns","Header","accessor","Cell","value","moment","unix","fromNow","className","sorted","id","desc","defaultPageSize","pageSizeOptions","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","Fragment","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.4bf997de.chunk.js","sourcesContent":["import './App.css';\nimport React from 'react';\nimport moment from 'moment';\nimport { Button } from 'reactstrap';\nimport ReactTable from \"react-table-6\";  \nimport \"react-table-6/react-table.css\" \nimport '@fortawesome/fontawesome-free/css/all.min.css'\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      data : [{\n        kind: '500',\n        tags:['Loading'],\n        user: {\n          userId: ''\n        },\n      }],\n      isLoaded: false\n    }\n  }\n\n  async componentDidMount(){\n    const response = await fetch(\"https://vorail-app.appspot.com/app/v1/qa/questions/my-subscribed?userId=_3fd816cf762fdcbc98de5fd281c52738\")\n    const res = await response.json()\n    this.setState({\n      data: res.questions,\n      isLoaded: true\n    })\n  }\n  \n  handleClick = async (name,userId,soundId,question_key) => {\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        name,\n        userId,\n        soundId,\n        question_key\n      })\n    };\n    try\n    {\n      const response = await fetch('http://localhost:4000/', requestOptions)\n      const data = await response.json()\n      console.log(data)\n    }\n\n    catch (err)\n    {\n      console.error(err)\n    }\n  }\n\n  render()\n  {\n    const populateData = (resData) => {\n      let arr = [];\n      resData.forEach((question) => {\n        if ((question.kind >= 500) && (question.tags) && (question.tags[0] !== '')) {\n          arr.push({\n            question: this.state.isLoaded === false ? 'Loading' : question.tags[0],\n            file: this.state.isLoaded === false ? 'Loading . . .' : <audio style={{ width: \"100%\" }} src={\"https://storage.googleapis.com/vorail/\" + question.user.userId + \"/\" + question.soundId} controls preload=\"none\" ><track kind=\"captions\" /></audio>,\n            date: question.createdAt,\n            convert:this.state.isLoaded === false ? 'Loading . . .' : <Button method='POST' color=\"danger\" onClick={() => {this.handleClick(question.tags[0], question.user.userId, question.soundId, question.key)}}>Convert</Button>,\n            key: question.key,\n          })\n        }\n      })\n      return arr\n    }\n\n    const newData = populateData(this.state.data);\n    const columns = [\n      {\n        Header: 'Questions',\n        accessor: 'question', // accessor is the \"key\" in the data\n        Cell: props => <span>{props.value}</span>, // Custom cell components!\n        style: { 'whiteSpace': 'unset', 'textAlign': 'center' },\n      },\n      {\n        Header: '',\n        accessor: 'file',\n        Cell: props => <span>{props.value}</span>, // Custom cell components!\n        style: { 'whiteSpace': 'unset', 'textAlign': 'center' },\n      }, \n      {\n        Header: 'Time',\n        accessor: 'date',\n        Cell: props => <span>{props.value == null ?\"Loading\" :moment.unix(props.value).fromNow() }</span>, // Custom cell components!\n        style: { 'whiteSpace': 'unset', 'textAlign': 'center'},\n      },\n      {\n        Header: 'Convert To Video',\n        accessor: 'convert',\n        Cell: props => <span>{props.value}</span>, // Custom cell components!\n        style: { 'whiteSpace': 'unset', 'textAlign': 'center' },\n      }\n    ]\n    \n    return (\n      <center>\n        <div className=\"App\"> \n          <h1 style={{color:'#0275d8'}}>Audio to Video Converter</h1>\n          <p><small>NB: Click convert button to start conversion. It will be downloaded automatically when conversion is done</small></p>\n          <div className=\"tableWrapper\">\n            <ReactTable\n              sorted={[{ id: \"date\", desc: true }]}\n              data={newData} \n              columns={columns} \n              defaultPageSize = {5} \n              pageSizeOptions = {[5,10,20,50]}  \n            />\n          </div>\n        </div>\n      </center>\n      )\n    }\n  }\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}